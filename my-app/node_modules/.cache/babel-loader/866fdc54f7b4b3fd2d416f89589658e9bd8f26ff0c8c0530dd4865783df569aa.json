{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\andre\\\\Desktop\\\\examen\\\\ExamenDAW\\\\my-app\\\\src\\\\StudentsTable.tsx\",\n  _s = $RefreshSig$();\nimport { useEffect, useState } from \"react\";\nimport axios from \"axios\";\nimport React from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst StudentTable = () => {\n  _s();\n  // aici se definesc constantele\n  const [studentsList, setStudentsList] = useState([]);\n  const tableHeaders = [\"Id\", \"Nume\", \"Telefon\"];\n\n  // aici se definesc functiile\n  const fetchData = async () => {\n    var _studentResponse$data, _studentResponse$data2;\n    const studentResponse = await axios({\n      url: \"url-din-backend\",\n      method: \"get\"\n    });\n    // obiectul returnat va fi de tip json Array => 'students' : {['id': 1, 'nume': 'test', 'phone': '000'], ['id': 2, 'nume': 'test2', 'phone': '000'], ...}\n\n    // daca am primit eroare sau nu s-a returnat nimic din BE, iesi din functie\n    if (!(studentResponse !== null && studentResponse !== void 0 && studentResponse.data) || studentResponse !== null && studentResponse !== void 0 && (_studentResponse$data = studentResponse.data) !== null && _studentResponse$data !== void 0 && _studentResponse$data.error) {\n      return;\n    }\n\n    // Response Default de la AXIOS Requests:\n    // {\n    //     data: {},\n    //     status: 200,\n    //     statusText: 'OK',\n    //     headers: {},\n    //     config: {},\n    //     request: {}\n    //   }\n    // daca vrei sa verifici ce se intoarce pe Request:\n    // console.log(studentResponse?.request) -> apoi, dai refresh la pagina din browser pentru a re-procesa request-ul si te uiti in:\n    // F12 in chrome -> console\n\n    const students = studentResponse === null || studentResponse === void 0 ? void 0 : (_studentResponse$data2 = studentResponse.data) === null || _studentResponse$data2 === void 0 ? void 0 : _studentResponse$data2.students; // accesam studentii dupa 'cheia' din 'dictionarul' studentResponse\n    // students = [['id': 1, 'nume': 'test', 'phone': '000'], ['id': 2, 'nume': 'test2', 'phone': '000'], ...]\n    setStudentsList(students);\n  };\n\n  // functia care ruleaza PRIMA la incarcarea paginii si nu are nevoie de apelare\n  useEffect(() => {\n    fetchData();\n  }, []);\n\n  // in return o sa ai HTML si CSS + integrare de obiecte\n  return (\n    /*#__PURE__*/\n    /* Definim un tabel cu simple Bootstrap5 pentru studenti*/\n    _jsxDEV(\"table\", {\n      className: \"table\",\n      children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n        children: /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: tableHeaders.map((name, id) => /*#__PURE__*/_jsxDEV(\"th\", {\n            children: name\n          }, id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 58,\n            columnNumber: 13\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 55,\n          columnNumber: 9\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n        style: {\n          display: \"table-row-group\"\n        },\n        children: studentsList === null || studentsList === void 0 ? void 0 : studentsList.map(student => /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: [/*#__PURE__*/_jsxDEV(\"td\", {\n            children: (student === null || student === void 0 ? void 0 : student.id) || \"\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 68,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            children: (student === null || student === void 0 ? void 0 : student.name) || \"\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 70,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            children: (student === null || student === void 0 ? void 0 : student.phone) || \"\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 71,\n            columnNumber: 13\n          }, this)]\n        }, student === null || student === void 0 ? void 0 : student.id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 67,\n          columnNumber: 11\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 5\n    }, this)\n  );\n};\n_s(StudentTable, \"GKRZ3wh6nCE9Zla3fCZzKpGY0l8=\");\n_c = StudentTable;\nexport default StudentTable;\nvar _c;\n$RefreshReg$(_c, \"StudentTable\");","map":{"version":3,"names":["useEffect","useState","axios","React","jsxDEV","_jsxDEV","StudentTable","_s","studentsList","setStudentsList","tableHeaders","fetchData","_studentResponse$data","_studentResponse$data2","studentResponse","url","method","data","error","students","className","children","map","name","id","fileName","_jsxFileName","lineNumber","columnNumber","style","display","student","phone","_c","$RefreshReg$"],"sources":["C:/Users/andre/Desktop/examen/ExamenDAW/my-app/src/StudentsTable.tsx"],"sourcesContent":["import { useEffect, useState } from \"react\";\r\nimport { StudentsType } from \"./students.types\";\r\nimport axios from \"axios\";\r\nimport React from \"react\";\r\n\r\nconst StudentTable: React.FC = () => {\r\n  // aici se definesc constantele\r\n  const [studentsList, setStudentsList] = useState<StudentsType[]>([]);\r\n\r\n  const tableHeaders = [\"Id\", \"Nume\", \"Telefon\"];\r\n\r\n  // aici se definesc functiile\r\n  const fetchData = async () => {\r\n    const studentResponse = await axios({\r\n      url: \"url-din-backend\",\r\n      method: \"get\",\r\n    });\r\n    // obiectul returnat va fi de tip json Array => 'students' : {['id': 1, 'nume': 'test', 'phone': '000'], ['id': 2, 'nume': 'test2', 'phone': '000'], ...}\r\n\r\n    // daca am primit eroare sau nu s-a returnat nimic din BE, iesi din functie\r\n    if (!studentResponse?.data || studentResponse?.data?.error) {\r\n      return;\r\n    }\r\n\r\n    // Response Default de la AXIOS Requests:\r\n    // {\r\n    //     data: {},\r\n    //     status: 200,\r\n    //     statusText: 'OK',\r\n    //     headers: {},\r\n    //     config: {},\r\n    //     request: {}\r\n    //   }\r\n    // daca vrei sa verifici ce se intoarce pe Request:\r\n    // console.log(studentResponse?.request) -> apoi, dai refresh la pagina din browser pentru a re-procesa request-ul si te uiti in:\r\n    // F12 in chrome -> console\r\n\r\n    const students: StudentsType[] = studentResponse?.data?.students; // accesam studentii dupa 'cheia' din 'dictionarul' studentResponse\r\n    // students = [['id': 1, 'nume': 'test', 'phone': '000'], ['id': 2, 'nume': 'test2', 'phone': '000'], ...]\r\n    setStudentsList(students);\r\n  };\r\n\r\n  // functia care ruleaza PRIMA la incarcarea paginii si nu are nevoie de apelare\r\n  useEffect(() => {\r\n    fetchData();\r\n  }, []);\r\n\r\n  // in return o sa ai HTML si CSS + integrare de obiecte\r\n  return (\r\n    /* Definim un tabel cu simple Bootstrap5 pentru studenti*/\r\n    <table className=\"table\">\r\n      <thead>\r\n        {/* //tableHead - delimiteaza header-ul de restul tabelului */}\r\n        {/* begin::TableHead */}\r\n        <tr>\r\n          {/* // tr = TableRow - asigura paginarea in lungime */}\r\n          {tableHeaders.map((name, id) => (\r\n            <th key={id}>{name}</th>\r\n          ))}\r\n        </tr>\r\n      </thead>\r\n      {/* end::TableHead */}\r\n\r\n      {/* begin:TableBody */}\r\n      <tbody style={{ display: \"table-row-group\" }}>\r\n        {studentsList?.map((student) => (\r\n          <tr key={student?.id}>\r\n            <td>{student?.id || \"\"}</td>\r\n            {/* // td - TableData - valoarea ce va fi pusa in tabel */}\r\n            <td>{student?.name || \"\"}</td>\r\n            <td>{student?.phone || \"\"}</td>\r\n          </tr>\r\n        ))}\r\n      </tbody>\r\n      {/* end::TableBody */}\r\n    </table>\r\n  );\r\n};\r\n\r\nexport default StudentTable;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}